#!/usr/bin/env python3
"""
SVG2PPTX Project Setup Script

This script helps set up the SVG2PPTX API project with all necessary dependencies
and configuration files.
"""

import os
import sys
import subprocess
import secrets
import urllib.parse
from pathlib import Path

def print_header(title):
    """Print a formatted header."""
    print(f"\n{'=' * 60}")
    print(f" {title}")
    print('=' * 60)

def run_command(command, description):
    """Run a shell command and report results."""
    print(f"üì¶ {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} completed")
            return True
        else:
            print(f"‚ùå {description} failed: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå Error running command: {e}")
        return False

def create_env_file():
    """Create a .env file with necessary configuration."""
    print("üîß Creating .env configuration file...")
    
    # Generate a secure API key
    api_key = secrets.token_urlsafe(32)
    
    env_content = f'''# SVG2PPTX API Configuration
# Generated by setup_project.py

# API Security
API_SECRET_KEY={api_key}

# Google OAuth Configuration (update with your values)
GOOGLE_DRIVE_AUTH_METHOD=oauth
GOOGLE_DRIVE_CLIENT_ID=your-client-id.apps.googleusercontent.com
GOOGLE_DRIVE_CLIENT_SECRET=your-client-secret

# Token Storage
GOOGLE_DRIVE_TOKEN_FILE=./credentials/token.json

# Optional: Google Drive folder ID for uploads
# GOOGLE_DRIVE_FOLDER_ID=your-folder-id
'''

    env_file = Path('.env')
    if env_file.exists():
        print("‚ö†Ô∏è  .env file already exists. Backing up...")
        env_file.rename('.env.backup')
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    # Set secure permissions
    os.chmod('.env', 0o600)
    
    print(f"‚úÖ .env file created with API key: {api_key[:16]}...")
    print("üîí File permissions set to 600 (secure)")

def setup_directories():
    """Create necessary directories."""
    print("üìÅ Creating project directories...")
    
    directories = ['credentials', 'logs', 'temp']
    
    for directory in directories:
        dir_path = Path(directory)
        if not dir_path.exists():
            dir_path.mkdir(mode=0o700, exist_ok=True)
            print(f"‚úÖ Created {directory}/ directory")
        else:
            print(f"üìÅ {directory}/ directory already exists")

def update_gitignore():
    """Update .gitignore with important exclusions."""
    print("üîí Updating .gitignore...")
    
    gitignore_entries = [
        '# SVG2PPTX API - Sensitive files',
        '.env',
        '.env.*',
        'credentials/',
        'logs/',
        'temp/',
        '*.log',
        '__pycache__/',
        '*.pyc',
        'venv/',
        '.pytest_cache/',
        '.coverage'
    ]
    
    gitignore_file = Path('.gitignore')
    existing_content = ''
    
    if gitignore_file.exists():
        existing_content = gitignore_file.read_text()
    
    # Add entries that don't exist
    new_entries = []
    for entry in gitignore_entries:
        if entry not in existing_content:
            new_entries.append(entry)
    
    if new_entries:
        with open('.gitignore', 'a') as f:
            f.write('\n' + '\n'.join(new_entries) + '\n')
        print(f"‚úÖ Added {len(new_entries)} entries to .gitignore")
    else:
        print("üìù .gitignore already up to date")

def check_python_version():
    """Check if Python version is compatible."""
    print("üêç Checking Python version...")
    
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 9):
        print(f"‚ùå Python {version.major}.{version.minor} is not supported. Please use Python 3.9+")
        return False
    else:
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} is compatible")
        return True

def setup_virtual_environment():
    """Set up virtual environment if it doesn't exist."""
    print("üåê Setting up virtual environment...")
    
    venv_path = Path('venv')
    if venv_path.exists():
        print("‚úÖ Virtual environment already exists")
        return True
    
    # Create virtual environment
    if run_command('python3 -m venv venv', 'Creating virtual environment'):
        print("‚úÖ Virtual environment created")
        return True
    return False

def install_dependencies():
    """Install project dependencies."""
    print("üì¶ Installing dependencies...")
    
    # Activate venv and install dependencies
    commands = [
        'source venv/bin/activate && pip install --upgrade pip',
        'source venv/bin/activate && pip install -r requirements.txt'
    ]
    
    for command in commands:
        if not run_command(command, f"Running: {command.split('&&')[-1].strip()}"):
            return False
    
    return True

def test_installation():
    """Test that the installation works."""
    print("üß™ Testing installation...")
    
    test_command = '''
    source venv/bin/activate && python -c "
import sys
sys.path.append('.')
from api.main import app
from api.services.google_oauth import GoogleOAuthService
from src.svg2drawingml import SVGToDrawingMLConverter
from testbench import PPTXBuilder
print('‚úÖ All components imported successfully')
"
    '''
    
    return run_command(test_command, 'Testing imports')

def display_next_steps():
    """Display next steps for the user."""
    print_header("Setup Complete! Next Steps")
    
    print("1. üîê Configure Google OAuth:")
    print("   - Follow the guide in SETUP_OAUTH.md")
    print("   - Update .env file with your OAuth credentials")
    print()
    print("2. üß™ Test OAuth setup:")
    print("   source venv/bin/activate")
    print("   python -c \"from api.services.google_oauth import setup_oauth_credentials; setup_oauth_credentials()\"")
    print()
    print("3. üöÄ Start the development server:")
    print("   source venv/bin/activate") 
    print("   uvicorn api.main:app --host 0.0.0.0 --port 8001 --reload")
    print()
    print("4. üìñ API Documentation:")
    print("   http://localhost:8001/docs")
    print()
    print("5. üîß Environment file:")
    print("   Edit .env to configure your settings")

def main():
    """Main setup function."""
    print_header("SVG2PPTX API Project Setup")
    
    # Check if we're in the right directory
    if not Path('requirements.txt').exists():
        print("‚ùå requirements.txt not found. Please run this script from the project root.")
        sys.exit(1)
    
    steps = [
        ("Python version", check_python_version),
        ("Project directories", setup_directories),
        ("Environment file", create_env_file),
        ("Git ignore", update_gitignore),
        ("Virtual environment", setup_virtual_environment),
        ("Dependencies", install_dependencies),
        ("Installation test", test_installation)
    ]
    
    failed_steps = []
    
    for step_name, step_func in steps:
        print(f"\nüìã Step: {step_name}")
        try:
            if not step_func():
                failed_steps.append(step_name)
        except Exception as e:
            print(f"‚ùå Error in {step_name}: {e}")
            failed_steps.append(step_name)
    
    if failed_steps:
        print(f"\n‚ö†Ô∏è  Setup completed with {len(failed_steps)} issues:")
        for step in failed_steps:
            print(f"   - {step}")
        print("\nReview the errors above and run the script again if needed.")
    else:
        print("\nüéâ Setup completed successfully!")
        display_next_steps()

if __name__ == "__main__":
    main()