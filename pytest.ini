[tool:pytest]
# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test execution options
addopts = 
    --strict-markers
    --strict-config
    --cov=src
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-report=term-missing
    --cov-fail-under=80
    --tb=short
    --no-header
    --showlocals

# Markers for test categorization
markers =
    unit: Unit tests for individual components
    integration: Integration tests for multiple components
    visual: Visual regression tests for SVG-to-PPTX conversion
    benchmark: Performance benchmark tests
    slow: Tests that take more than 10 seconds
    converter: Tests for converter modules
    utils: Tests for utility modules
    performance: Tests for performance optimization modules
    api: Tests for API endpoints
    db: Tests requiring database operations

# Test filtering
minversion = 6.0
required_plugins = 
    pytest-cov>=4.0.0
    pytest-mock>=3.10.0
    pytest-benchmark>=4.0.0
    pytest-xdist>=3.0.0
    pytest-html>=3.2.0

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */virtualenv/*
    */.venv/*
    setup.py
    conftest.py

[coverage:report]
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover
    
    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug
    
    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError
    
    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:
    
    # Don't complain about abstract methods
    @(abc\.)?abstractmethod

# Coverage reporting options
precision = 1
show_missing = true
skip_covered = false
sort = -cover

[coverage:html]
directory = htmlcov
title = SVG2PPTX Test Coverage Report