#!/usr/bin/env python3
"""
Clean Slate Architecture Demonstration

Demonstrates the complete end-to-end pipeline from SVG to PPTX
using the new clean slate architecture.
"""

import sys
import time
from pathlib import Path

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent))

from core.pipeline import create_default_pipeline, create_fast_pipeline, create_quality_pipeline, create_debug_pipeline
from core.pipeline.config import PipelineConfig, OutputFormat


def create_sample_svg() -> str:
    """Create a sample SVG for demonstration"""
    return """<?xml version="1.0" encoding="UTF-8"?>
<svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
    <!-- Background rectangle -->
    <rect x="0" y="0" width="400" height="300" fill="#f0f0f0" stroke="#ccc" stroke-width="2"/>

    <!-- Title text -->
    <text x="200" y="40" text-anchor="middle" font-family="Arial" font-size="24" font-weight="bold" fill="#333">
        Clean Slate Demo
    </text>

    <!-- Colored rectangles -->
    <rect x="50" y="80" width="80" height="60" fill="#4CAF50" rx="5"/>
    <rect x="160" y="80" width="80" height="60" fill="#2196F3" rx="5"/>
    <rect x="270" y="80" width="80" height="60" fill="#FF9800" rx="5"/>

    <!-- Circle -->
    <circle cx="200" cy="200" r="40" fill="#E91E63" stroke="#C2185B" stroke-width="3"/>

    <!-- Path element -->
    <path d="M 100 240 Q 200 200 300 240 T 350 260" stroke="#9C27B0" stroke-width="4" fill="none"/>

    <!-- Group with multiple elements -->
    <g transform="translate(50, 250)">
        <rect x="0" y="0" width="20" height="20" fill="#607D8B"/>
        <rect x="25" y="0" width="20" height="20" fill="#795548"/>
        <rect x="50" y="0" width="20" height="20" fill="#FFC107"/>
    </g>

    <!-- Text with styling -->
    <text x="200" y="285" text-anchor="middle" font-family="Arial" font-size="14" fill="#666">
        Generated by Clean Slate Architecture
    </text>
</svg>"""


def demonstrate_pipeline_presets():
    """Demonstrate different pipeline presets"""
    print("🚀 Clean Slate Architecture Demonstration\n")

    # Create sample SVG
    svg_content = create_sample_svg()
    print(f"📄 Created sample SVG ({len(svg_content)} characters)")

    presets = [
        ("Fast", create_fast_pipeline),
        ("Balanced", create_default_pipeline),
        ("High Quality", create_quality_pipeline),
        ("Debug", create_debug_pipeline)
    ]

    results = {}

    for preset_name, preset_factory in presets:
        print(f"\n🔧 Testing {preset_name} preset...")

        try:
            # Create converter
            converter = preset_factory()

            # Convert SVG
            start_time = time.perf_counter()
            result = converter.convert_string(svg_content)
            end_time = time.perf_counter()

            # Collect statistics
            stats = converter.get_statistics()

            results[preset_name] = {
                'result': result,
                'stats': stats,
                'wall_time': (end_time - start_time) * 1000
            }

            print(f"   ✅ Success in {result.total_time_ms:.2f}ms")
            print(f"   📊 Elements: {result.elements_processed} ({result.native_elements} native, {result.emf_elements} EMF)")
            print(f"   💾 Output: {len(result.output_data)} bytes")
            print(f"   🎯 Quality: {result.estimated_quality:.3f}")
            print(f"   ⚡ Performance: {result.estimated_performance:.3f}")

        except Exception as e:
            print(f"   ❌ Failed: {e}")
            results[preset_name] = {'error': str(e)}

    return results


def demonstrate_output_formats():
    """Demonstrate different output formats"""
    print("\n📤 Output Format Demonstration\n")

    svg_content = create_sample_svg()

    formats = [
        (OutputFormat.PPTX, "PowerPoint presentation"),
        (OutputFormat.SLIDE_XML, "Slide XML"),
        (OutputFormat.DEBUG_JSON, "Debug JSON")
    ]

    for output_format, description in formats:
        print(f"🔧 Testing {description}...")

        try:
            # Create custom config
            config = PipelineConfig()
            config.output_format = output_format

            # Create converter
            from core.pipeline.factory import PipelineFactory
            converter = PipelineFactory.create_converter(config)

            # Convert
            result = converter.convert_string(svg_content)

            print(f"   ✅ Generated {len(result.output_data)} bytes")

            # Show sample of output (first 200 chars)
            if output_format in [OutputFormat.SLIDE_XML, OutputFormat.DEBUG_JSON]:
                sample = result.output_data.decode('utf-8')[:200]
                print(f"   📝 Sample: {sample}...")

        except Exception as e:
            print(f"   ❌ Failed: {e}")


def demonstrate_statistics():
    """Demonstrate detailed statistics collection"""
    print("\n📈 Statistics Demonstration\n")

    svg_content = create_sample_svg()
    converter = create_default_pipeline()

    # Convert with statistics
    result = converter.convert_string(svg_content)
    stats = converter.get_statistics()

    print("🔍 Conversion Statistics:")
    print(f"   Total Time: {result.total_time_ms:.2f}ms")
    print(f"   - Parse: {result.parse_time_ms:.2f}ms")
    print(f"   - Analyze: {result.analyze_time_ms:.2f}ms")
    print(f"   - Mapping: {result.mapping_time_ms:.2f}ms")
    print(f"   - Embedding: {result.embedding_time_ms:.2f}ms")
    print(f"   - Packaging: {result.packaging_time_ms:.2f}ms")

    print(f"\n📊 Element Statistics:")
    print(f"   Elements Processed: {result.elements_processed}")
    print(f"   Native Elements: {result.native_elements}")
    print(f"   EMF Elements: {result.emf_elements}")
    print(f"   Media Files: {result.media_files}")
    print(f"   Relationships: {result.relationships}")

    print(f"\n🎯 Quality Metrics:")
    print(f"   Estimated Quality: {result.estimated_quality:.3f}")
    print(f"   Estimated Performance: {result.estimated_performance:.3f}")

    print(f"\n🔧 Mapper Statistics:")
    for mapper_name, mapper_stats in stats.get('mapper_stats', {}).items():
        print(f"   {mapper_name.title()}:")
        print(f"     - Total Mapped: {mapper_stats.get('total_mapped', 0)}")
        print(f"     - Native Ratio: {mapper_stats.get('native_ratio', 0):.3f}")
        print(f"     - EMF Ratio: {mapper_stats.get('emf_ratio', 0):.3f}")
        print(f"     - Avg Time: {mapper_stats.get('avg_time_ms', 0):.2f}ms")


def save_demo_outputs():
    """Save demonstration outputs to files"""
    print("\n💾 Saving Demo Outputs\n")

    svg_content = create_sample_svg()

    # Save sample SVG
    with open('clean_slate_demo.svg', 'w') as f:
        f.write(svg_content)
    print("📄 Saved: clean_slate_demo.svg")

    # Save PPTX output
    converter = create_default_pipeline()
    result = converter.convert_string(svg_content)

    with open('clean_slate_demo.pptx', 'wb') as f:
        f.write(result.output_data)
    print("📊 Saved: clean_slate_demo.pptx")

    # Save slide XML
    config = PipelineConfig()
    config.output_format = OutputFormat.SLIDE_XML
    from core.pipeline.factory import PipelineFactory
    xml_converter = PipelineFactory.create_converter(config)
    xml_result = xml_converter.convert_string(svg_content)

    with open('clean_slate_demo_slide.xml', 'w') as f:
        f.write(xml_result.output_data.decode('utf-8'))
    print("📝 Saved: clean_slate_demo_slide.xml")

    # Save debug JSON
    config.output_format = OutputFormat.DEBUG_JSON
    debug_converter = PipelineFactory.create_converter(config)
    debug_result = debug_converter.convert_string(svg_content)

    with open('clean_slate_demo_debug.json', 'w') as f:
        f.write(debug_result.output_data.decode('utf-8'))
    print("🔍 Saved: clean_slate_demo_debug.json")


def main():
    """Main demonstration function"""
    print("=" * 60)
    print("🎯 CLEAN SLATE ARCHITECTURE DEMONSTRATION")
    print("=" * 60)

    try:
        # Demonstrate pipeline presets
        results = demonstrate_pipeline_presets()

        # Demonstrate output formats
        demonstrate_output_formats()

        # Demonstrate statistics
        demonstrate_statistics()

        # Save outputs
        save_demo_outputs()

        print("\n" + "=" * 60)
        print("✅ DEMONSTRATION COMPLETED SUCCESSFULLY")
        print("=" * 60)

        # Summary
        print("\n📋 Summary:")
        print("   • Clean slate architecture fully functional")
        print("   • End-to-end SVG → PPTX conversion working")
        print("   • Multiple quality presets available")
        print("   • Comprehensive statistics and debugging")
        print("   • Policy-driven native vs EMF decisions")
        print("   • Documented text fixes applied")
        print("   • Group flattening optimization available")
        print("   • Complete PPTX package generation")

        return True

    except Exception as e:
        print(f"\n❌ DEMONSTRATION FAILED: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)