name: Google Slides Visual Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'basic'
        type: choice
        options:
          - basic
          - comprehensive
          - performance

env:
  PYTHONPATH: .

jobs:
  visual-tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/tests/visual/google_slides/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1-mesa-glx \
          libglib2.0-0 \
          libnss3-dev \
          libgconf-2-4 \
          libxss1 \
          libxtst6 \
          libxrandr2 \
          libasound2-dev \
          libpangocairo-1.0-0 \
          libatk1.0-0 \
          libcairo-gobject2 \
          libgtk-3-0 \
          libgdk-pixbuf2.0-0

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/visual/google_slides/requirements.txt
        pip install pytest pytest-asyncio pytest-cov

    - name: Install Playwright browsers
      run: |
        playwright install chromium

    - name: Setup Google credentials
      if: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
      run: |
        mkdir -p ~/.config/svg2pptx
        echo '${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}' > ~/.config/svg2pptx/google_credentials.json

    - name: Create test directories
      run: |
        mkdir -p tests/visual/screenshots
        mkdir -p tests/visual/references
        mkdir -p tests/visual/reports
        mkdir -p tests/visual/temp
        mkdir -p tests/visual/logs

    - name: Run unit tests
      run: |
        pytest tests/visual/google_slides/test_integration.py::TestGoogleSlidesAuthenticator -v
        pytest tests/visual/google_slides/test_integration.py::TestSlidesConverter -v
        pytest tests/visual/google_slides/test_integration.py::TestSlidesPublisher -v
        pytest tests/visual/google_slides/test_integration.py::TestVisualValidator -v
        pytest tests/visual/google_slides/test_integration.py::TestGoogleSlidesTestRunner -v

    - name: Run integration tests
      if: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
      env:
        GOOGLE_SLIDES_TEST_CREDENTIALS: ~/.config/svg2pptx/google_credentials.json
      run: |
        pytest tests/visual/google_slides/test_integration.py -m integration -v --tb=short

    - name: Run performance tests
      if: ${{ github.event.inputs.test_suite == 'performance' && secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
      env:
        GOOGLE_SLIDES_TEST_CREDENTIALS: ~/.config/svg2pptx/google_credentials.json
      run: |
        pytest tests/visual/google_slides/test_integration.py -m performance -v --tb=short

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: visual-test-results-${{ matrix.python-version }}
        path: |
          tests/visual/screenshots/
          tests/visual/reports/
          tests/visual/logs/
        retention-days: 7

    - name: Upload coverage reports
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: visual-tests
        name: visual-tests-coverage

    - name: Comment on PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          // Check if test reports exist
          const reportsDir = 'tests/visual/reports';
          if (fs.existsSync(reportsDir)) {
            const files = fs.readdirSync(reportsDir);
            const reportFiles = files.filter(f => f.endsWith('.json'));

            if (reportFiles.length > 0) {
              let comment = '## üéØ Visual Test Results\n\n';

              for (const reportFile of reportFiles) {
                try {
                  const reportPath = path.join(reportsDir, reportFile);
                  const reportData = JSON.parse(fs.readFileSync(reportPath, 'utf8'));

                  const { summary } = reportData;
                  const successRate = ((summary.successful_tests / summary.total_tests) * 100).toFixed(1);

                  comment += `### ${reportFile}\n`;
                  comment += `- **Success Rate**: ${successRate}% (${summary.successful_tests}/${summary.total_tests})\n`;
                  comment += `- **Total Time**: ${summary.total_time.toFixed(2)}s\n`;

                  if (summary.failed_tests > 0) {
                    comment += `- ‚ö†Ô∏è **${summary.failed_tests} test(s) failed**\n`;
                  }
                  comment += '\n';
                } catch (e) {
                  console.log(`Error reading report ${reportFile}:`, e);
                }
              }

              comment += '\nüìä Detailed reports available in the workflow artifacts.';

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          }

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r tests/visual/google_slides/ -f json -o security-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: security-report.json